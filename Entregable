#include <iostream>  // Incluye la biblioteca estándar de entrada/salida (para usar cin y cout)
#include <string>    // Incluye la biblioteca para manejar cadenas de texto (string)

using namespace std; // Permite usar elementos de la biblioteca estándar sin escribir std::

/**
 * @brief Clase que representa una reserva en el sistema.
 * @details Esta clase permite gestionar los datos de una reserva, incluyendo el nombre del cliente,
 *          el número de personas, la fecha y la hora de la reservación.
 */
class Reserva {
private:
    string nombreCliente;    ///< Nombre del cliente que realiza la reserva.
    int numeroPersonas;      ///< Número de personas incluidas en la reserva.
    string fecha;            ///< Fecha de la reserva en formato dd/mm/aaaa.
    string hora;             ///< Hora de la reserva en formato hh:mm.

public:
    /**
     * @brief Constructor por defecto de la clase Reserva.
     * @details Inicializa todos los campos de la reserva con valores vacíos o por defecto.
     */
    Reserva() : nombreCliente(""), numeroPersonas(0), fecha(""), hora("") {}

    /**
     * @brief Captura los datos de la reserva desde la entrada estándar.
     * @details Solicita al usuario que ingrese el nombre del cliente, el número de personas,
     *          la fecha y la hora de la reserva. Los datos ingresados se almacenan en los
     *          atributos correspondientes de la clase.
     */
    void capturarDatos() {
        cout<<"Ingrese el nombre del cliente: ";
        cin>>nombreCliente;

        cout<<"Ingrese el número de personas: ";
        cin>>numeroPersonas;

        cout<<"Ingrese la fecha (dd/mm/aaaa): ";
        cin>>fecha;

        cout<<"Ingrese la hora (hh:mm): ";
        cin>>hora;

        cout<<"\nReserva creada con éxito\n";
    }

    /**
     * @brief Muestra los detalles de la reserva.
     * @details Imprime en pantalla el nombre del cliente, el número de personas,
     *          la fecha y la hora de la reserva.
     */
    void mostrarDetalles() const {
        cout << "\nDetalles de la reserva:\n";
        cout<<"Cliente: " << nombreCliente << endl;
        cout <<"Número de personas: " << numeroPersonas << endl;
        cout <<"Fecha: "<< fecha<< endl;
        cout <<"Hora: "<< hora << endl;
    }

    /**
     * @brief Verifica si la reserva es válida.
     * @details Una reserva se considera válida si todos los campos están completos:
     *          - El nombre del cliente no está vacío.
     *          - El número de personas es mayor que 0.
     *          - La fecha no está vacía.
     *          - La hora no está vacía.
     * @return true si la reserva es válida, false en caso contrario.
     */
    bool esReservaValida() const {
        return !nombreCliente.empty() && numeroPersonas > 0 && !fecha.empty() && !hora.empty();
    }
};

/**
 * @brief Función principal del programa.
 * @details Crea una instancia de la clase Reserva, captura los datos de la reserva,
 *          muestra los detalles y verifica si la reserva es válida.
 * @return 0 si el programa se ejecuta correctamente.
 */
int main() {
    Reserva reserva; // Crea un objeto de la clase Reserva

    // Captura de datos de la reserva
    reserva.capturarDatos();

    // Mostrar los detalles de la reserva
    reserva.mostrarDetalles();

    // Verificar si la reserva es válida
    if (reserva.esReservaValida()) {
        cout << "\nLa reserva es válida.\n";
    } else {
        cout << "\nLa reserva no es válida.\n";
    }

    return 0;
}
